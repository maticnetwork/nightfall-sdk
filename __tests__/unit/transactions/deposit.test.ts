import { createAndSubmitDeposit } from "../../../libs/transactions";
import { submitTransaction } from "../../../libs/transactions/helpers/submit";
import { NightfallSdkError } from "../../../libs/utils/error";

jest.mock("../../../libs/transactions/helpers/submit");

describe("Deposit transaction", () => {
  const token = {};
  const ownerEthAddress = "0x0ownerEthAddress";
  const ownerEthPrivateKey = "0x0ownerEthPrivateKey";
  const ownerZkpKeys = {};
  const shieldContractAddress = "0x0shieldContractAddress";
  const web3 = {};
  const value = "70000000000000000";
  const fee = "10";

  const mockedClient = {
    deposit: jest.fn(),
  };

  test("Should fail if client throws a Nightfall error", () => {
    // Arrange
    mockedClient.deposit.mockRejectedValue(new NightfallSdkError("Oops"));
    // Act, Assert
    expect(
      async () =>
        await createAndSubmitDeposit(
          token,
          ownerEthAddress,
          ownerEthPrivateKey,
          // eslint-disable-next-line @typescript-eslint/ban-ts-comment
          // @ts-ignore
          ownerZkpKeys,
          shieldContractAddress,
          web3,
          mockedClient,
          value,
          fee,
        ),
    ).rejects.toThrow(NightfallSdkError);
    expect(mockedClient.deposit).toHaveBeenCalledTimes(1);
  });

  test("Should throw an error if an exception is caught when submitting tx", () => {
    // Arrange
    const unsignedTx =
      "0x9ae2b6be00000000000000000000000000000000000000000000000000f8b0a10e470000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000499d11e0b6eac7c0593d8fb292dcbbf815fb29ae0000000000000000000000000000000000000000000000000000000000000000190332473427eb9d94c691bc0c8824287dad6c98f65baa6bf914ddd518842ecd70e4e3f2f442966773f49a23d8b91062410117a816d6315a3ba6e8819013d8579885dbb490160f10a6af2bcba5d9b27735bef54bd147e72e933eee97f3635a8c9896e3445bfaeef5390ccee910836b153e67f36acc825a52fa0a53e7d811e10446743ae98616ae2c40c25fd901d64002391839c7ba57a97742a885b4a133d";
    const txReceiptL2 = {
      value:
        "0x00000000000000000000000000000000000000000000000000f8b0a10e470000",
      fee: "0x000000000000000000000000000000000000000000000000000000000000000a",
      transactionType:
        "0x0000000000000000000000000000000000000000000000000000000000000000",
      tokenType:
        "0x0000000000000000000000000000000000000000000000000000000000000000",
      historicRootBlockNumberL2: [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "0x0000000000000000000000000000000000000000000000000000000000000000",
      ],
      historicRootBlockNumberL2Fee: [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "0x0000000000000000000000000000000000000000000000000000000000000000",
      ],
      tokenId:
        "0x0000000000000000000000000000000000000000000000000000000000000000",
      ercAddress:
        "0x000000000000000000000000499d11E0b6eAC7c0593d8Fb292DCBbF815Fb29Ae",
      recipientAddress:
        "0x0000000000000000000000000000000000000000000000000000000000000000",
      commitments: [
        "0x190332473427eb9d94c691bc0c8824287dad6c98f65baa6bf914ddd518842ec4",
        "0x0000000000000000000000000000000000000000000000000000000000000000",
      ],
      nullifiers: [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "0x0000000000000000000000000000000000000000000000000000000000000000",
      ],
      commitmentFee: [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
      ],
      nullifiersFee: [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "0x0000000000000000000000000000000000000000000000000000000000000000",
      ],
      compressedSecrets: [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "0x0000000000000000000000000000000000000000000000000000000000000000",
      ],
      proof: [
        "0x27d70e4e3f2f442966773f49a23d8b91062410117a816d6315a3ba6e8819013d",
        "0x2b7729f6d54febe10c9d83cf05c9092313f79409a4f6fdc53eceded5c9b48a66",
        "0x0579885dbb490160f10a6af2bcba5d9b27735bef54bd147e72e933eee97f3635",
        "0x28c9896e3445bfaeef5390ccee910836b153e67f36acc825a52fa0a53e7d811e",
        "0x18546fdc3d2552d735b7b0d4b10406d15c0ec77bf083cf41428cb620e0bdd61d",
        "0x27b562431026c6e86b6b1d2dab3cfad133408e74bf29b23b1fbc018f42160fbb",
        "0x10446743ae98616ae2c40c25fd901d64002391839c7ba57a97742a885b4a133d",
        "0x1dcbacf443defe08aaf1a63d688417fb4b64b4b085c6203f020e74f091c5d514",
      ],
      transactionHash:
        "0x08b6d1705e4294e0b01aca27fdb84ef94ddc67bc5991443f94bc3a9d44a222ba",
    };
    const mockedDepositResData = {
      txDataToSign: unsignedTx,
      transaction: txReceiptL2,
    };
    mockedClient.deposit.mockResolvedValue(mockedDepositResData);

    (submitTransaction as jest.Mock).mockRejectedValue(
      new Error("Web3 failed at sending signed tx"),
    );

    // Act, Assert
    expect(
      async () =>
        await createAndSubmitDeposit(
          token,
          ownerEthAddress,
          ownerEthPrivateKey,
          // eslint-disable-next-line @typescript-eslint/ban-ts-comment
          // @ts-ignore
          ownerZkpKeys,
          shieldContractAddress,
          web3,
          mockedClient,
          value,
          fee,
        ),
    ).rejects.toThrow(NightfallSdkError);
    expect(mockedClient.deposit).toHaveBeenCalledWith(
      token,
      ownerZkpKeys,
      value,
      fee,
    );
    // expect(submitTransaction).toHaveBeenCalledTimes(1); // TODO
  });

  test("Should return an instance of <OnChainTransactionReceipts>", async () => {
    // Arrange
    const unsignedTx =
      "0x9ae2b6be00000000000000000000000000000000000000000000000000f8b0a10e470000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000499d11e0b6eac7c0593d8fb292dcbbf815fb29ae0000000000000000000000000000000000000000000000000000000000000000190332473427eb9d94c691bc0c8824287dad6c98f65baa6bf914ddd518842ecd70e4e3f2f442966773f49a23d8b91062410117a816d6315a3ba6e8819013d8579885dbb490160f10a6af2bcba5d9b27735bef54bd147e72e933eee97f3635a8c9896e3445bfaeef5390ccee910836b153e67f36acc825a52fa0a53e7d811e10446743ae98616ae2c40c25fd901d64002391839c7ba57a97742a885b4a133d";
    const txReceiptL2 = {
      value:
        "0x00000000000000000000000000000000000000000000000000f8b0a10e470000",
      fee: "0x000000000000000000000000000000000000000000000000000000000000000a",
      transactionType:
        "0x0000000000000000000000000000000000000000000000000000000000000000",
      tokenType:
        "0x0000000000000000000000000000000000000000000000000000000000000000",
      historicRootBlockNumberL2: [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "0x0000000000000000000000000000000000000000000000000000000000000000",
      ],
      historicRootBlockNumberL2Fee: [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "0x0000000000000000000000000000000000000000000000000000000000000000",
      ],
      tokenId:
        "0x0000000000000000000000000000000000000000000000000000000000000000",
      ercAddress:
        "0x000000000000000000000000499d11E0b6eAC7c0593d8Fb292DCBbF815Fb29Ae",
      recipientAddress:
        "0x0000000000000000000000000000000000000000000000000000000000000000",
      commitments: [
        "0x190332473427eb9d94c691bc0c8824287dad6c98f65baa6bf914ddd518842ec4",
        "0x0000000000000000000000000000000000000000000000000000000000000000",
      ],
      nullifiers: [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "0x0000000000000000000000000000000000000000000000000000000000000000",
      ],
      commitmentFee: [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
      ],
      nullifiersFee: [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "0x0000000000000000000000000000000000000000000000000000000000000000",
      ],
      compressedSecrets: [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "0x0000000000000000000000000000000000000000000000000000000000000000",
      ],
      proof: [
        "0x27d70e4e3f2f442966773f49a23d8b91062410117a816d6315a3ba6e8819013d",
        "0x2b7729f6d54febe10c9d83cf05c9092313f79409a4f6fdc53eceded5c9b48a66",
        "0x0579885dbb490160f10a6af2bcba5d9b27735bef54bd147e72e933eee97f3635",
        "0x28c9896e3445bfaeef5390ccee910836b153e67f36acc825a52fa0a53e7d811e",
        "0x18546fdc3d2552d735b7b0d4b10406d15c0ec77bf083cf41428cb620e0bdd61d",
        "0x27b562431026c6e86b6b1d2dab3cfad133408e74bf29b23b1fbc018f42160fbb",
        "0x10446743ae98616ae2c40c25fd901d64002391839c7ba57a97742a885b4a133d",
        "0x1dcbacf443defe08aaf1a63d688417fb4b64b4b085c6203f020e74f091c5d514",
      ],
      transactionHash:
        "0x08b6d1705e4294e0b01aca27fdb84ef94ddc67bc5991443f94bc3a9d44a222ba",
    };
    const mockedDepositResData = {
      txDataToSign: unsignedTx,
      transaction: txReceiptL2,
    };
    mockedClient.deposit.mockResolvedValue(mockedDepositResData);

    const txReceipt = {
      blockHash:
        "0x662ef5091477ca482ff516f874dae344badc1d3de499a651b1a81560ab83212b",
      blockNumber: 7437816,
      contractAddress: "",
      cumulativeGasUsed: 71454,
      effectiveGasPrice: 20000000000,
      from: "0x02f979a781260955ee760e92e893938ad1ab8a5e",
      gasUsed: 71454,
      logs: [
        {
          address: "0x2eEeeC446F92c868220CAB1A2ff3cd77937e6560",
          topics: [
            "0xd9364d1faedd45a064f9090dd61ade3de8d1c1fd83caaa8ebdc4b9808f4eb989",
          ],
          data: "0x",
          blockNumber: 7437816,
          transactionHash:
            "0x228326b82f9000002b055b2333fcfe435361f847f36001c4abf77f0500c9ab99",
          transactionIndex: 0,
          blockHash:
            "0x662ef5091477ca482ff516f874dae344badc1d3de499a651b1a81560ab83212b",
          logIndex: 0,
          removed: false,
          id: "log_77176ef4",
        },
        {
          address: "0x499d11E0b6eAC7c0593d8Fb292DCBbF815Fb29Ae",
          topics: [
            "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
            "0x00000000000000000000000002f979a781260955ee760e92e893938ad1ab8a5e",
            "0x0000000000000000000000002eeeec446f92c868220cab1a2ff3cd77937e6560",
          ],
          data: "0x00000000000000000000000000000000000000000000000000f8b0a10e470000",
          blockNumber: 7437816,
          transactionHash:
            "0x228326b82f9000002b055b2333fcfe435361f847f36001c4abf77f0500c9ab99",
          transactionIndex: 0,
          blockHash:
            "0x662ef5091477ca482ff516f874dae344badc1d3de499a651b1a81560ab83212b",
          logIndex: 1,
          removed: false,
          id: "log_2fe5d3d2",
        },
        {
          address: "0x499d11E0b6eAC7c0593d8Fb292DCBbF815Fb29Ae",
          topics: [
            "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
            "0x00000000000000000000000002f979a781260955ee760e92e893938ad1ab8a5e",
            "0x0000000000000000000000002eeeec446f92c868220cab1a2ff3cd77937e6560",
          ],
          data: "0xffffffffffffffffffffffffffffffffffffffffffffffffff074f5ef1b8ffff",
          blockNumber: 7437816,
          transactionHash:
            "0x228326b82f9000002b055b2333fcfe435361f847f36001c4abf77f0500c9ab99",
          transactionIndex: 0,
          blockHash:
            "0x662ef5091477ca482ff516f874dae344badc1d3de499a651b1a81560ab83212b",
          logIndex: 2,
          removed: false,
          id: "log_b1a736d5",
        },
      ],
      logsBloom:
        "0x
      status: true,
      to: "0x2eeeec446f92c868220cab1a2ff3cd77937e6560",
      transactionHash:
        "0x228326b82f9000002b055b2333fcfe435361f847f36001c4abf77f0500c9ab99",
      transactionIndex: 0,
      type: "0x0",
    };
    (submitTransaction as jest.Mock).mockResolvedValue(txReceipt);
    // Act
    const txReceipts = await createAndSubmitDeposit(
      token,
      ownerEthAddress,
      ownerEthPrivateKey,
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      ownerZkpKeys,
      shieldContractAddress,
      web3,
      mockedClient,
      value,
      fee,
    );
    // Assert
    expect(mockedClient.deposit).toHaveBeenCalledWith(
      token,
      ownerZkpKeys,
      value,
      fee,
    );
    expect(submitTransaction).toHaveBeenCalledWith(
      ownerEthAddress,
      ownerEthPrivateKey,
      shieldContractAddress,
      unsignedTx,
      web3,
      fee,
    );
    expect(txReceipts).toStrictEqual({ txReceipt, txReceiptL2 });
  });
});
